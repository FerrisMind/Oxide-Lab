#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ GGUF —Ñ–∞–π–ª–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤.
–ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–¥–µ–ª—è—Ö.
"""

import sys
import struct
from pathlib import Path

def read_gguf_header(file_path):
    """–ß–∏—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ GGUF —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    with open(file_path, 'rb') as f:
        # –ß–∏—Ç–∞–µ–º magic number
        magic = f.read(4)
        if magic != b'GGUF':
            print(f"‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è GGUF —Ñ–∞–π–ª–æ–º. Magic: {magic}")
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –ø–æ—Ä—è–¥–æ–∫ –±–∞–π—Ç–æ–≤
        version_bytes = f.read(4)
        version = struct.unpack('<I', version_bytes)[0] if len(version_bytes) == 4 else 0

        # –ß–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–Ω–∑–æ—Ä–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        tensor_count_bytes = f.read(8)
        metadata_count_bytes = f.read(8)

        if len(tensor_count_bytes) != 8 or len(metadata_count_bytes) != 8:
            print("‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ GGUF —Ñ–∞–π–ª–∞")
            return None

        tensor_count = struct.unpack('<Q', tensor_count_bytes)[0]
        metadata_count = struct.unpack('<Q', metadata_count_bytes)[0]

        print("‚úÖ GGUF —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω"        print(f"   –í–µ—Ä—Å–∏—è: {version}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–Ω–∑–æ—Ä–æ–≤: {tensor_count}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {metadata_count}")

        return {
            'version': version,
            'tensor_count': tensor_count,
            'metadata_count': metadata_count,
            'file': f
        }

def read_metadata(file_handle, count):
    """–ß–∏—Ç–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ GGUF —Ñ–∞–π–ª–∞."""
    metadata = {}

    for i in range(count):
        # –ß–∏—Ç–∞–µ–º –∫–ª—é—á –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        key_len_bytes = file_handle.read(8)
        if len(key_len_bytes) != 8:
            break

        key_len = struct.unpack('<Q', key_len_bytes)[0]
        key = file_handle.read(key_len).decode('utf-8', errors='ignore')

        # –ß–∏—Ç–∞–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
        value_type_bytes = file_handle.read(4)
        if len(value_type_bytes) != 4:
            break

        value_type = struct.unpack('<I', value_type_bytes)[0]

        # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if value_type == 0:  # uint8
            value = struct.unpack('<B', file_handle.read(1))[0]
        elif value_type == 1:  # int8
            value = struct.unpack('<b', file_handle.read(1))[0]
        elif value_type == 2:  # uint16
            value = struct.unpack('<H', file_handle.read(2))[0]
        elif value_type == 3:  # int16
            value = struct.unpack('<h', file_handle.read(2))[0]
        elif value_type == 4:  # uint32
            value = struct.unpack('<I', file_handle.read(4))[0]
        elif value_type == 5:  # int32
            value = struct.unpack('<i', file_handle.read(4))[0]
        elif value_type == 6:  # float32
            value = struct.unpack('<f', file_handle.read(4))[0]
        elif value_type == 7:  # bool
            value = bool(struct.unpack('<B', file_handle.read(1))[0])
        elif value_type == 8:  # string
            str_len = struct.unpack('<Q', file_handle.read(8))[0]
            value = file_handle.read(str_len).decode('utf-8', errors='ignore')
        elif value_type == 9:  # array
            array_type = struct.unpack('<I', file_handle.read(4))[0]
            array_len = struct.unpack('<Q', file_handle.read(8))[0]
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–∏–≤—ã
            value = f"Array[type={array_type}, len={array_len}]"
            file_handle.seek(array_len, 1)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤–∞
        elif value_type == 10:  # uint64
            value = struct.unpack('<Q', file_handle.read(8))[0]
        elif value_type == 11:  # int64
            value = struct.unpack('<q', file_handle.read(8))[0]
        elif value_type == 12:  # float64
            value = struct.unpack('<d', file_handle.read(8))[0]
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {value_type}")
            return metadata

        metadata[key] = value

    return metadata

def read_tensors_info(file_handle, count):
    """–ß–∏—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–∑–æ—Ä–∞—Ö –∏–∑ GGUF —Ñ–∞–π–ª–∞."""
    tensors = []

    for i in range(count):
        # –ß–∏—Ç–∞–µ–º –∏–º—è —Ç–µ–Ω–∑–æ—Ä–∞
        name_len_bytes = file_handle.read(8)
        if len(name_len_bytes) != 8:
            break

        name_len = struct.unpack('<Q', name_len_bytes)[0]
        name = file_handle.read(name_len).decode('utf-8', errors='ignore')

        # –ß–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        n_dims_bytes = file_handle.read(4)
        if len(n_dims_bytes) != 4:
            break

        n_dims = struct.unpack('<I', n_dims_bytes)[0]

        # –ß–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
        dimensions = []
        for _ in range(n_dims):
            dim_bytes = file_handle.read(8)
            if len(dim_bytes) != 8:
                break
            dimensions.append(struct.unpack('<Q', dim_bytes)[0])

        # –ß–∏—Ç–∞–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–∞
        dtype_bytes = file_handle.read(4)
        if len(dtype_bytes) != 4:
            break

        dtype = struct.unpack('<I', dtype_bytes)[0]

        # –ß–∏—Ç–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–∞
        offset_bytes = file_handle.read(8)
        if len(offset_bytes) != 8:
            break

        offset = struct.unpack('<Q', offset_bytes)[0]

        tensors.append({
            'name': name,
            'n_dims': n_dims,
            'dimensions': dimensions,
            'dtype': dtype,
            'offset': offset
        })

    return tensors

def analyze_gguf_file(file_path):
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ GGUF —Ñ–∞–π–ª–∞."""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ GGUF —Ñ–∞–π–ª–∞: {file_path}")
    print("=" * 60)

    # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header_info = read_gguf_header(file_path)
    if not header_info:
        return

    file_handle = header_info['file']

    # –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    print(f"\nüìã –ß—Ç–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ({header_info['metadata_count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)...")
    metadata = read_metadata(file_handle, header_info['metadata_count'])

    print(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {len(metadata)}")
    for key, value in metadata.items():
        if "token" in key.lower() or "model" in key.lower() or "arch" in key.lower():
            print(f"   {key}: {value}")

    # –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–∑–æ—Ä–∞—Ö
    print(f"\nüßÆ –ß—Ç–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–Ω–∑–æ—Ä–∞—Ö ({header_info['tensor_count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)...")
    tensors = read_tensors_info(file_handle, header_info['tensor_count'])

    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ–Ω–∑–æ—Ä–æ–≤: {len(tensors)}")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    dtype_counts = {}
    for tensor in tensors:
        dtype = tensor['dtype']
        if dtype in dtype_counts:
            dtype_counts[dtype] += 1
        else:
            dtype_counts[dtype] = 1

    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
    for dtype, count in sorted(dtype_counts.items()):
        print(f"   –¢–∏–ø {dtype}: {count} —Ç–µ–Ω–∑–æ—Ä–æ–≤")

    # –ò—â–µ–º —Ç–µ–Ω–∑–æ—Ä 39
    if len(tensors) > 39:
        tensor_39 = tensors[39]
        print("
üéØ –¢–µ–Ω–∑–æ—Ä 39:"        print(f"   –ò–º—è: {tensor_39['name']}")
        print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: {tensor_39['dimensions']}")
        print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {tensor_39['dtype']}")
        print(f"   –°–º–µ—â–µ–Ω–∏–µ: {tensor_39['offset']}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        dtype_names = {
            0: "F32", 1: "F16", 2: "Q4_0", 3: "Q4_1", 4: "Q4_2 (deprecated)",
            5: "Q4_3 (deprecated)", 6: "Q5_0", 7: "Q5_1", 8: "Q8_0", 9: "Q8_1",
            10: "Q2_K", 11: "Q3_K", 12: "Q4_K", 13: "Q5_K", 14: "Q6_K", 15: "Q8_K",
            16: "IQ2_XXS", 17: "IQ2_XS", 18: "IQ3_XXS", 19: "IQ1_S", 20: "IQ4_NL",
            21: "IQ3_S", 22: "IQ2_S", 23: "IQ4_XS", 24: "I8", 25: "I16", 26: "I32",
            27: "I64", 28: "F64", 29: "IQ1_M"
        }

        dtype_name = dtype_names.get(tensor_39['dtype'], f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø {tensor_39['dtype']}")
        print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {dtype_name}")

        if tensor_39['dtype'] >= 16:  # –ù–æ–≤—ã–µ —Ç–∏–ø—ã IQ
            print(f"   ‚ö†Ô∏è  –≠—Ç–æ –Ω–æ–≤—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö IQ (Intelligent Quantization)")
            print(f"   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Candle –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏")

    file_handle.close()

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python diagnose_gguf_dtype.py <–ø—É—Ç—å_–∫_gguf_—Ñ–∞–π–ª—É>")
        sys.exit(1)

    file_path = Path(sys.argv[1])

    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        sys.exit(1)

    if not file_path.suffix.lower() == '.gguf':
        print(f"‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è GGUF —Ñ–∞–π–ª–æ–º: {file_path}")
        sys.exit(1)

    analyze_gguf_file(file_path)

if __name__ == "__main__":
    main()
