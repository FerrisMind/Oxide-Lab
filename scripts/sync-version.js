#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ Cargo.toml —Å package.json
 */
function syncVersion() {
  try {
    // –ß–∏—Ç–∞–µ–º Cargo.toml
    const cargoTomlPath = path.join(__dirname, '..', 'src-tauri', 'Cargo.toml');
    const cargoTomlContent = fs.readFileSync(cargoTomlPath, 'utf8');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ Cargo.toml
    const versionMatch = cargoTomlContent.match(/version\s*=\s*"([^"]+)"/);
    if (!versionMatch) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–µ—Ä—Å–∏—é –≤ Cargo.toml');
      process.exit(1);
    }

    const version = versionMatch[1];
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤ Cargo.toml: ${version}`);

    // –ß–∏—Ç–∞–µ–º package.json
    const packageJsonPath = path.join(__dirname, '..', 'package.json');
    const packageJsonContent = fs.readFileSync(packageJsonPath, 'utf8');
    const packageJson = JSON.parse(packageJsonContent);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (packageJson.version === version) {
      console.log('‚úÖ –í–µ—Ä—Å–∏–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ package.json
    packageJson.version = version;

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');

    console.log(`‚úÖ –í–µ—Ä—Å–∏—è –≤ package.json –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${version}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
syncVersion();
